Data Structures Framework
version 0.9.0
June 17, 2002
Los Angeles
Phillip Morelock - creator / maintainer
http://www.phillipmorelock.com/examples/cocoadata/

CONTRIBUTORS (contributors go at the top in alpha order):
Max Horn
////////Bugfixes, ideas/example code/inspiration for converting
////////much of the "guts" to straight C for speed, ideas for interface consistency
Phillip Morelock  me@phillipmorelock.com  http://www.phillipmorelock.com/
////////Stacks, Queues, Linked Lists, Trees, maintenance, conversion of internals to straight C
Jay Wardell
///////Bugfixes, ideas for conversion of data structures to other types
Gordon Worley  redbird@rbisland.cx  http://www.rbisland.cx/
///////ArrayHeap

This entire package and all files underneath it are licensed to you under the GNU LGPL -- which can be found verbatim in the LICENSE.html file.  What this basically means is that anyone can use this package for any purpose -- but there are very important restrictions, so you must read that file before using the source in this package.  My current personal official release of this software in source form only can be found at http://www.phillipmorelock.com/examples/cocoadata/DataFrame.sit

As well, this README file is considered a source file under the LGPL and you must include it if you redistribute the library in source form under the LGPL.  If you change the library, you should make your own additional README and include it with the source, describing your changes.  If you contribute to the library by giving me source, you may keep your copyright or assign it to me, but you must agree to license it through the library's LGPL license.

My name is Phillip Morelock and I can be reached through http://www.phillipmorelock.com/ .
This Framework is Free Software and is intended for educational purposes or to serve as a foundation for more highly refined / optimized data structures. Generic data structures will continue to be added to the library, and of course I will continue to refine and specialize these structures if they are needed for particular applications.  I would really, really appreciate any contributions to the Framework, or at least please drop me an email if you're going to make use of any of it.  But you don't have to -- you just have to read and abide by the LGPL included in the file LICENSE.  The LGPL is commonly misunderstood -- read it and understand it.

In this release:
- More bugfixes.  Most of the code should be better tested generally now.
- Some adventures off on random trails.  Feel free to go there yourself ;)
- A standard LinkedList implementation, with an NSEnumerator and a fast C internal structure.
- Two stacks and two queues -- one stack and one array using NSMutableArray, and another set using my linked list implementation.
- A heap implementation using NSMutableArray.  Some raw C optimizations for this class as well.
- Unbalanced binary search tree that uses the Comparable protocol for comparisons.  It's cool, because it doesn't use recursion -- but consequently it's a bit of a hack.  It is also unbalanced and the NSEnumerator needs work (I'm not sure right now that it wouldn't crash.  Just wanted to get this release out, so don't use the objectEnumerator for now).
- A red-black tree that does not implement the remove algorithm -- i would appreciate any help on this.  No remove method is provided.  It's hard.  I'm working on it.  It is also not converted to straight C yet, as I have not had the time.  The interface is now cleaner, however.
- Conversion methods to convert several of the data structures to other types (or to generate data structures from Cocoa standards such as NSSet, NSArray, etc.).
- Interface "compliance" with other Foundation data structures.  Whereas before the interfaces in this library were wildly inconsistent with each other and with Cocoa, now you will find method names that feel more like the method names you will find in other Foundation classes.  This should make working with the library easier.

Future releases:
-Algorithm improvements, an n-way tree, more data structure conversion methods.  I was going to implement a Hashtable -- but doesn't NSDictionary do well enough for everyone?  It's pretty fast and seems to work properly.  If anyone can think  of a necessarily more specialized hashtable implementation, please let me know.
- Pre, post, and inorder iterators for both binary search trees.
- Remove method for red-black tree.

A few caveats:

1.  While certain implementations utilize straight C for the internals, this Framework is still fairly high level.  It uses lots of nifty Objective-C constructs because when I started writing this framework, it was a way for me to learn how to generically work with the language's runtime type system.  I am a Java programmer by trade.  As a consequence, raw machine performance is not emphasized in this incarnation -- but all algorithms should be sound algorithms you would expect in data structures of these kinds (i.e., if you know what O(log(n)) means, you probably know what a proper data structure algorithm is...if the algorithms are bad, please tell me).  You will find that certain implementations use a lot of raw C for optimization, while some implementations (notably those based on Arrays or our Red Black Tree) utilize higher-level objective c constructs.

2.  My environments:  Mac OS X 10.1.3 on a PowerMac G4 733, and an iBook 500 mhz.  The source is provided in a .sit archive that has a .pbproj Mac OS X project builder file in it, for those of you using the IDE.  Also, I encourage feedback from anyone using GNUStep about portability issues, and will include any patches necessary or remove any OS X specific code if it is not critical to the library.

3.  Ok, I heard from Don Yacktman, the creator / maintainer of MiscKit.  It seems his kit should be re-released for OS X within the next year (that's just what I inferred from his email, not a firm statement, I specifically disclaim responsibility for spreading this rumor).  Nevertheless, work will continue on this framework until such time as I have a MiscKit in my warm, live hands.  At that point, non-redundant code may be donated to MiscKit or I may focus my own personal efforts on improving MiscKit.  Don says MiscKit will be released under a BSD-style license to allow greater flexibilty for the user -- I have no problem relicensing my code for this purpose, but I will ask all contributors individually if that day ever comes...don't worry if you've contributed to this framework.

4.  The Framework might not compile right on your machine.  My machines all have my account with the same name and uid so I can work seamlessly across my home unix (mac/linux) network.  From what I've heard, people haven't had problems with this.  If this is a problem for you, and you know how to / figure out how to fix it, please drop me an email and let me know what I can do to better prepare these things for release.

5.  There isn't a heck of a lot of header documentation and commenting.  this is because I think these are fairly basic data structures at this time and don't need documentation (sorry!).  If you need help, feel free to email me.  If you want to contribute documentation, I will be happy to include accurate documentation in these files.  (NOTE: this is getting better.  Especially read the protocol declarations).